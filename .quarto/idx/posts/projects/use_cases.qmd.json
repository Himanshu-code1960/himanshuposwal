{"title":"Use Cases","markdown":{"yaml":{"title":"Use Cases","author":"Himanshu Poswal","date":"2025-02-24"},"headingText":"Use Cases:","containsRefs":false,"markdown":"\n\n\n## 1. Denoising a picture\n\nIn this example, we denoise a noisy version of a picture using the total variation, bilateral, and wavelet denoising filters.\n\nTotal variation and bilateral algorithms typically produce “posterized” images with flat domains separated by sharp edges. It is possible to change the degree of posterization by controlling the tradeoff between denoising and faithfulness to the original image.\n\n```python\nimport matplotlib.pyplot as plt\n\nfrom skimage.restoration import (\n    denoise_tv_chambolle,\n    denoise_bilateral,\n    denoise_wavelet,\n    estimate_sigma,\n)\nfrom skimage import data, img_as_float\nfrom skimage.util import random_noise\n\n\noriginal = img_as_float(data.chelsea()[100:250, 50:300])\n\nsigma = 0.155\nnoisy = random_noise(original, var=sigma**2)\n\nfig, ax = plt.subplots(nrows=2, ncols=4, figsize=(8, 5), sharex=True, sharey=True)\n\nplt.gray()\n\n# Estimate the average noise standard deviation across color channels.\nsigma_est = estimate_sigma(noisy, channel_axis=-1, average_sigmas=True)\n# Due to clipping in random_noise, the estimate will be a bit smaller than the\n# specified sigma.\nprint(f'Estimated Gaussian noise standard deviation = {sigma_est}')\n\nax[0, 0].imshow(noisy)\nax[0, 0].axis('off')\nax[0, 0].set_title('Noisy')\nax[0, 1].imshow(denoise_tv_chambolle(noisy, weight=0.1, channel_axis=-1))\nax[0, 1].axis('off')\nax[0, 1].set_title('TV')\nax[0, 2].imshow(\n    denoise_bilateral(noisy, sigma_color=0.05, sigma_spatial=15, channel_axis=-1)\n)\nax[0, 2].axis('off')\nax[0, 2].set_title('Bilateral')\nax[0, 3].imshow(denoise_wavelet(noisy, channel_axis=-1, rescale_sigma=True))\nax[0, 3].axis('off')\nax[0, 3].set_title('Wavelet denoising')\n\nax[1, 1].imshow(denoise_tv_chambolle(noisy, weight=0.2, channel_axis=-1))\nax[1, 1].axis('off')\nax[1, 1].set_title('(more) TV')\nax[1, 2].imshow(\n    denoise_bilateral(noisy, sigma_color=0.1, sigma_spatial=15, channel_axis=-1)\n)\nax[1, 2].axis('off')\nax[1, 2].set_title('(more) Bilateral')\nax[1, 3].imshow(\n    denoise_wavelet(noisy, channel_axis=-1, convert2ycbcr=True, rescale_sigma=True)\n)\nax[1, 3].axis('off')\nax[1, 3].set_title('Wavelet denoising\\nin YCbCr colorspace')\nax[1, 0].imshow(original)\nax[1, 0].axis('off')\nax[1, 0].set_title('Original')\n\nfig.tight_layout()\n\nplt.show()\n```\n\n![Output](image_7.png)\n\n\n## 2. Face detection using a cascade classifier\n\nFace recognition is widely used in security, user authentication, and emotion detection. This computer vision example shows how to detect faces on an image using object detection framework based on machine learning.\n\n```python\nfrom skimage import data\nfrom skimage.feature import Cascade\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\n\n# Load the trained file from the module root.\ntrained_file = data.lbp_frontal_face_cascade_filename()\n\n# Initialize the detector cascade.\ndetector = Cascade(trained_file)\n\nimg = data.astronaut()\n\ndetected = detector.detect_multi_scale(\n    img=img, scale_factor=1.2, step_ratio=1, min_size=(60, 60), max_size=(123, 123)\n)\n\nfig, ax = plt.subplots()\nax.imshow(img, cmap='gray')\n\nfor patch in detected:\n    ax.axes.add_patch(\n        patches.Rectangle(\n            (patch['c'], patch['r']),\n            patch['width'],\n            patch['height'],\n            fill=False,\n            color='r',\n            linewidth=2,\n        )\n    )\n\nplt.show()\n```\n![Output](image_3.png)\n\n\n## 3. Render text onto an image\n\nRendering text onto an image is a common technique used in various real-world applications.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom skimage import data\n\nimg = data.cat()\n\nfig = plt.figure()\nfig.figimage(img, resize=True)\nfig.text(0, 0.99, \"I am stefan's cat.\", fontsize=32, va=\"top\")\nfig.canvas.draw()\nannotated_img = np.asarray(fig.canvas.renderer.buffer_rgba())\nplt.close(fig)\n```\n```python\nfig, ax = plt.subplots()\nax.imshow(annotated_img)\nax.set_axis_off()\nax.set_position([0, 0, 1, 1])\nplt.show()\n```\n\n![Output](image_4.png)\n\n\n## 4. Medical Image Processing\n\nExample: Interact with 3D images (of kidney tissue)\n\n1. Load image\n\nThis biomedical image is available through scikit-image’s data registry.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport plotly\nimport plotly.express as px\nfrom skimage import data\ndata = data.kidney()\n\nn_plane, n_row, n_col, n_chan = data.shape\n```\n\nLet us consider only a slice (2D plane) of the data for now. More specifically, let us consider the slice located halfway in the stack. The imshow function can display both grayscale and RGB(A) 2D images.\n\n```python\n_, ax = plt.subplots()\n_, ax = plt.subplots()\nax.imshow(data[n_plane // 2])\n```\n\n![Output](image_5.png)\n\nWe turn to Plotly’s implementation of the plotly.express.imshow() function, for it supports value ranges beyond (0.0, 1.0) for floats and (0, 255) for integers.\n\n```python\nvmin, vmax = data.min(), data.max()\nfig = px.imshow(data[n_plane // 2], zmax=vmax)\nplotly.io.show(fig)\n```\n\n![Output](image_6.png)\n\n","srcMarkdownNoYaml":"\n\n# Use Cases:\n\n## 1. Denoising a picture\n\nIn this example, we denoise a noisy version of a picture using the total variation, bilateral, and wavelet denoising filters.\n\nTotal variation and bilateral algorithms typically produce “posterized” images with flat domains separated by sharp edges. It is possible to change the degree of posterization by controlling the tradeoff between denoising and faithfulness to the original image.\n\n```python\nimport matplotlib.pyplot as plt\n\nfrom skimage.restoration import (\n    denoise_tv_chambolle,\n    denoise_bilateral,\n    denoise_wavelet,\n    estimate_sigma,\n)\nfrom skimage import data, img_as_float\nfrom skimage.util import random_noise\n\n\noriginal = img_as_float(data.chelsea()[100:250, 50:300])\n\nsigma = 0.155\nnoisy = random_noise(original, var=sigma**2)\n\nfig, ax = plt.subplots(nrows=2, ncols=4, figsize=(8, 5), sharex=True, sharey=True)\n\nplt.gray()\n\n# Estimate the average noise standard deviation across color channels.\nsigma_est = estimate_sigma(noisy, channel_axis=-1, average_sigmas=True)\n# Due to clipping in random_noise, the estimate will be a bit smaller than the\n# specified sigma.\nprint(f'Estimated Gaussian noise standard deviation = {sigma_est}')\n\nax[0, 0].imshow(noisy)\nax[0, 0].axis('off')\nax[0, 0].set_title('Noisy')\nax[0, 1].imshow(denoise_tv_chambolle(noisy, weight=0.1, channel_axis=-1))\nax[0, 1].axis('off')\nax[0, 1].set_title('TV')\nax[0, 2].imshow(\n    denoise_bilateral(noisy, sigma_color=0.05, sigma_spatial=15, channel_axis=-1)\n)\nax[0, 2].axis('off')\nax[0, 2].set_title('Bilateral')\nax[0, 3].imshow(denoise_wavelet(noisy, channel_axis=-1, rescale_sigma=True))\nax[0, 3].axis('off')\nax[0, 3].set_title('Wavelet denoising')\n\nax[1, 1].imshow(denoise_tv_chambolle(noisy, weight=0.2, channel_axis=-1))\nax[1, 1].axis('off')\nax[1, 1].set_title('(more) TV')\nax[1, 2].imshow(\n    denoise_bilateral(noisy, sigma_color=0.1, sigma_spatial=15, channel_axis=-1)\n)\nax[1, 2].axis('off')\nax[1, 2].set_title('(more) Bilateral')\nax[1, 3].imshow(\n    denoise_wavelet(noisy, channel_axis=-1, convert2ycbcr=True, rescale_sigma=True)\n)\nax[1, 3].axis('off')\nax[1, 3].set_title('Wavelet denoising\\nin YCbCr colorspace')\nax[1, 0].imshow(original)\nax[1, 0].axis('off')\nax[1, 0].set_title('Original')\n\nfig.tight_layout()\n\nplt.show()\n```\n\n![Output](image_7.png)\n\n\n## 2. Face detection using a cascade classifier\n\nFace recognition is widely used in security, user authentication, and emotion detection. This computer vision example shows how to detect faces on an image using object detection framework based on machine learning.\n\n```python\nfrom skimage import data\nfrom skimage.feature import Cascade\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\n\n# Load the trained file from the module root.\ntrained_file = data.lbp_frontal_face_cascade_filename()\n\n# Initialize the detector cascade.\ndetector = Cascade(trained_file)\n\nimg = data.astronaut()\n\ndetected = detector.detect_multi_scale(\n    img=img, scale_factor=1.2, step_ratio=1, min_size=(60, 60), max_size=(123, 123)\n)\n\nfig, ax = plt.subplots()\nax.imshow(img, cmap='gray')\n\nfor patch in detected:\n    ax.axes.add_patch(\n        patches.Rectangle(\n            (patch['c'], patch['r']),\n            patch['width'],\n            patch['height'],\n            fill=False,\n            color='r',\n            linewidth=2,\n        )\n    )\n\nplt.show()\n```\n![Output](image_3.png)\n\n\n## 3. Render text onto an image\n\nRendering text onto an image is a common technique used in various real-world applications.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom skimage import data\n\nimg = data.cat()\n\nfig = plt.figure()\nfig.figimage(img, resize=True)\nfig.text(0, 0.99, \"I am stefan's cat.\", fontsize=32, va=\"top\")\nfig.canvas.draw()\nannotated_img = np.asarray(fig.canvas.renderer.buffer_rgba())\nplt.close(fig)\n```\n```python\nfig, ax = plt.subplots()\nax.imshow(annotated_img)\nax.set_axis_off()\nax.set_position([0, 0, 1, 1])\nplt.show()\n```\n\n![Output](image_4.png)\n\n\n## 4. Medical Image Processing\n\nExample: Interact with 3D images (of kidney tissue)\n\n1. Load image\n\nThis biomedical image is available through scikit-image’s data registry.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport plotly\nimport plotly.express as px\nfrom skimage import data\ndata = data.kidney()\n\nn_plane, n_row, n_col, n_chan = data.shape\n```\n\nLet us consider only a slice (2D plane) of the data for now. More specifically, let us consider the slice located halfway in the stack. The imshow function can display both grayscale and RGB(A) 2D images.\n\n```python\n_, ax = plt.subplots()\n_, ax = plt.subplots()\nax.imshow(data[n_plane // 2])\n```\n\n![Output](image_5.png)\n\nWe turn to Plotly’s implementation of the plotly.express.imshow() function, for it supports value ranges beyond (0.0, 1.0) for floats and (0, 255) for integers.\n\n```python\nvmin, vmax = data.min(), data.max()\nfig = px.imshow(data[n_plane // 2], zmax=vmax)\nplotly.io.show(fig)\n```\n\n![Output](image_6.png)\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"monokai","css":["../../styles.css"],"output-file":"use_cases.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.41","theme":["cosmo","brand"],"title-block-banner":true,"title":"Use Cases","author":"Himanshu Poswal","date":"2025-02-24"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}